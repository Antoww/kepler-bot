import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { getReminder } from '../database/supabase.ts';

export const name = 'interactionCreate';
export async function execute(interaction) {
    if (!interaction.isButton()) return;

    const [action, reminderId] = interaction.customId.split('_');
    if (action !== 'repeat') return;

    try {
        // Get reminder from database
        const reminder = await getReminder(parseInt(reminderId));
        if (!reminder) {
            console.log(`‚ùå [RAPPEL R√âP√âT√â] ID: ${reminderId} | Erreur: Rappel introuvable en base de donn√©es`);
            return interaction.reply({ content: 'Rappel introuvable.', ephemeral: true });
        }

        const { user_id: userId, message, duration_ms: duration } = reminder;
        
        console.log(`üîÑ [RAPPEL R√âP√âT√â] ID: ${reminderId} | Utilisateur: ${interaction.user.username} | Message: "${message}" | Dur√©e: ${duration}ms`);

    // Set a timeout to send the reminder again
    setTimeout(async () => {
        console.log(`üîî [RAPPEL R√âP√âT√â ENVOY√â] ID: ${reminderId} | Utilisateur: ${interaction.user.username} | Message: "${message}"`);
        
        const user = await interaction.client.users.fetch(userId);
        const embed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('Rappel')
            .setDescription(message)
            .setFooter({
                text: 'Demand√© par ' + interaction.user.username,
                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
            })
            .setTimestamp();

        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`repeat_${reminderId}`)
                    .setLabel('R√©p√©ter')
                    .setStyle(ButtonStyle.Primary)
            );

        try {
            await user.send({ embeds: [embed], components: [row] });
            console.log(`‚úÖ [RAPPEL R√âP√âT√â LIVR√â] ID: ${reminderId} | Utilisateur: ${interaction.user.username} | M√©thode: Message priv√©`);
        } catch (error) {
            await interaction.followUp({ content: 'Je n\'ai pas pu envoyer le rappel en message priv√©. Voici votre rappel :', embeds: [embed], components: [row], ephemeral: true });
            console.log(`‚ö†Ô∏è [RAPPEL R√âP√âT√â LIVR√â] ID: ${reminderId} | Utilisateur: ${interaction.user.username} | M√©thode: Message public (MP ferm√©s)`);
        }
    }, duration);

    await interaction.reply({ content: 'Le rappel a √©t√© r√©p√©t√© avec succ√®s!', ephemeral: true });
    } catch (error) {
        console.error('Erreur lors de la r√©p√©tition du rappel:', error);
        await interaction.reply({ content: 'Erreur lors de la r√©p√©tition du rappel. Veuillez r√©essayer.', ephemeral: true });
    }
}